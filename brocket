#! /bin/bash

# GPL License

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# <http://www.gnu.org/licenses/>.

# Information
name="brocket"
author="superfuzzykittens"
version="1.0"
site="https://github.com/superfuzzykittens/brocket"

# Help
help="Usage: $(basename ${0}) [-hv[a|p|R]] [TITLE] COMMAND

$name attempts to see if an application is running, and if so, bring the
 application's window to the front, otherwise launch an instance.
 In essence, a single window mode.

Help:
    -h   Print this help.
    -H   Print some more information.
    -v   Be verbose.

Arguments:
    TITLE     The window title case insensitive substring to search for.
    COMMAND   The shell command to run if there are no matches.

              A title search is optional, and when not provided, the command
               will be searched.

Modes:
    -a   Go to the desktop with the window.
    -p   Only activate windows on this desktop.
    -R   Bring the window from another desktop.

Examples:
    $(basename ${0}) kate
    $(basename ${0}) Dolphin dolphin
    $(basename ${0}) \"LibreOffice Writer\" libreoffice
    $(basename ${0}) -R amarok
    $(basename ${0}) -pv konsole"
longHelp="
Peculiarities:
    - The last mode entered is the one that counts.
    - p trumps a|R.
    - If there are already multiple search results, the oldest one counts.
    -
Suggestions:
    - Try aliases in ~/.bashrc, however you won't be able to launch multiple
       instances without \escaping.
    - Also try out KDE4's Custom Shortcuts to create a global shortcut.

Future Plans:
    - Implement move window to desktop +-1 (missing in KDE4)
    - Close window after inactivity time (not possible in wmctrl)

Information:
    $name v$version by $author
    $site"

# Specify the default variable values
args="-R"
verbose=""

# Get the passed options
i=0
while getopts ":ahHpRv" option; do
    case $option in
        a) args="-a";;
        h) echo "$help"; exit 2;;
        H) echo "$help"; echo "$longHelp"; exit 2;;
        p) mode="p"; args="-R";;
        R) args="-R";;
        v) verbose="true";;
    esac
done

# Remove parsed options
shift $((OPTIND-1))
[ "$verbose" ] && echo "Options unparsed: $*"


# Begin brocketing
windowTitle=$1 # Title bar search terms
if [ $2 ]; then
	command=$2 #Name of the binary to launch
else
	command=$1 #Use the search term if none
fi
[ "$verbose" ] && echo "Search: $windowTitle"
[ "$verbose" ] && echo "Command: $command"


# Get the users current desktop number
userDesktop=$(wmctrl -d | grep \* | cut -c 1)
[ "$verbose" ] && echo "Current Desktop: $userDesktop"

# Get the Window ID based on the window title search if on the user's current desktop
if [[ $mode == "p" ]]; then
    windowID=$(wmctrl -l | grep 0x........"  $userDesktop " | grep -m 1 -i "$windowTitle" | cut -c 1-10)
else
    windowID=$(wmctrl -l | grep -m 1 -i "$windowTitle" | cut -c 1-10)
fi
[ "$verbose" ] && echo
[ "$verbose" ] && echo "$(wmctrl -l)"
[ "$verbose" ] && echo
[ "$verbose" ] && echo "Search Results: $windowID"

# Look for a .desktop file to use launch notifications
desktopFile="$(find /usr/share/applications/ -name $command.desktop | grep -m 1 $command)"
[ "$verbose" ] && echo
[ "$verbose" ] && echo ".desktop File: $desktopFile"

# Check if kioclient exists for launch notifications
kioClientCheck=$(type -t kioclient)
[ "$verbose" ] && echo "KDE Environment?: $kioClientCheck ('file' means yes)"

if [ $windowID ]; then
    # Activate the window if one was found.
    wmctrl -i $args $windowID
elif [[ $desktopFile != "" ]] && [[ $kioClientCheck == "file" ]]; then
    # Otherwise try to open with Launch Notifications.
    kioclient exec $desktopFile
else
    # Finally, just launch the program
	$command &> /dev/null &
fi
exit 0