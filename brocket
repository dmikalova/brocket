#! /bin/bash
time1="$(date +%s.%N)"
license="GPL License:

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    <http://www.gnu.org/licenses/>
    "

# Information
author="superfuzzykittens"
description="A run-or-raise launcher for X11 Window Managers."
email="superfuzzykittens@gmail.com"
maintainer='David Mikalova'
name="brocket"
site="https://github.com/superfuzzykittens/brocket"
version="2.0"

# Help
help="Usage:
    $(basename ${0}) [-hHLv] [-m|n][-a|p|R][-c] COMMAND [TITLE]

    $name attempts to see if an application is running, and if so, bring the
     application's window to the front, otherwise launch an instance.
     In essence, a single window moveMode.

Arguments:
    TITLE     The window title to search for.(case insensitive substring)
    COMMAND   The shell command to search the window classes with.

              A title search is optional and the command will be used instead.
              A command search should be sufficient to find a general program.
              Multiple results will be cycled through.

Modes:
    -a   Move to the desktop with the window.
    -p   Only activate windows on the current desktop. (default)
    -R   Bring the window from any desktop.

    -c   Ignore the window class and only do a window title search.
    -m   Move the active window to the desktop on the left.  (ignores searches)
    -n   Move the active window to the desktop on the right. (ignores searches)

Help:
    -h   Print help.
    -H   Print more help.
    -L   GPL License.
    -v   Be verbose.

Examples:
    $(basename ${0}) kate
    $(basename ${0}) Dolphin dolphin
    $(basename ${0}) \"LibreOffice Writer\" libreoffice
    $(basename ${0}) -R amarok
    $(basename ${0}) -Rv konsole
    $(basename ${0}) -ac gwenview
    $(basename ${0}) -m
    "

longHelp="Compatability:
    - $name is based on wmctrl, and should work with the same WMs as wmctrl.
    - wmctrl is compatible with 'EWMH/NetWM compatible X Window Managers'
       Explicitly: Enlightenment, IceWM, KWin, Sawfish, and Xfce.
       Implicitly: Awesome, Fluxbox, Compiz, Openbox, and Metacity
                   (and XMonad if you turn on EWHM), and probably others.
    - With all that being said, $name has only been developed for/on Kwin.

Peculiarities:
    - The trumping order of modes is [-m|n][-a|p|R]

Suggestions:
    - Try out KDE4's Custom Shortcuts to create a global shortcut.
    - Try aliases in ~/.bashrc. This will only affect your terminals, and not
       krunner or KDE4's global shortcuts. Run multiple instances by \escaping.

Future Plans:
    - Close window after inactivity time which is not possible in wmctrl.
    - Be able to -aR from specific desktops.

Information:
    $name v$version by $author
    $site
    "

# The default variable values.
argsAction="-R"
argsList="-lx"
moveMode="Current Desktop"
modeSearch="Class"
verbose=""

# Get the passed options.
while getopts ":achHLmnpRv" option; do
    case $option in
        a) argsAction="-a"
           moveMode="All Desktops";;

        c) argsList="-l"
           modeSearch="Title"
           argsDesk="";;

        m) argsAction="-1"
           moveMode="Window move";;

        n) argsAction="1"
           moveMode="Window move";;

        p) argsAction="-R"
           argsList="-lx"
           argsDesk="1"
           moveMode="Current Desktop";;

        R) argsAction="-R"
           moveMode="All Desktops";;

        h) echo "$help"; exit 2;;
        H) echo "$help"; echo "$longHelp"; exit 2;;
        L) echo "$license"; echo "$help"; echo "$longHelp"; exit 2;;
        v) verbose="true";;
    esac
done

# Remove parsed options.
shift $((OPTIND-1))

# Set the launch command and title search.
command=$1 # Window class and launch command.
windowTitle=$1 # Title bar search terms.
if [ $2 ]; then
     # Use window title search if given.
	windowTitle=$2
fi

# Determine the user's desktop.
currentDesktop=" $(wmctrl -d | grep \* | cut -c 1)" # Get the current desktop number.
# currentWindow="$(printf '0x%08x\n' $WINDOWID)"
currentWindow="$(printf '0x%08x\n' $(xdpyinfo | grep focus | grep -E -o 0x[0-9a-f]+))"

# Generalize some search options.
desktopSearch=$currentDesktop # For all desktop searching.
classSearch=$command # For classless searching.
if [[ $moveMode == "All Desktops" ]]; then
    # Search all desktops
    desktopSearch=".."
fi
if [[ $modeSearch == "Title" ]]; then
    # Search only window title, ignore class.
    classSearch=".*"
fi
results="$(wmctrl -lx | grep "0x........ $desktopSearch $classSearch\." | grep -i "$windowTitle")"

# Check if search match is the current window, if so use the next window.
windowID="$(echo "$results" | grep -A1 "$currentWindow" | tail -1 |cut -c 1-10)"
if [[ $windowID == $currentWindow ]]; then
    # If the current window is the last result, use the first result.
    windowID="$(echo "$results" | head -1 |cut -c 1-10)"
elif [[ ! $windowID ]]; then
    # If there is only one window then use that one.
    windowID="$(echo "$results" | head -1 |cut -c 1-10)"
fi

# Raise the window or run command.
if [ $windowID ]; then
    # Activate the window that was found.
    wmctrl -i $argsAction "$windowID "
    time2="$(date +%s.%N)"
else
    # Check if kioclient exists for launch notifications.
    KDEcheck=$(type -t kioclient)
    # Look for a .desktop file to use for launch notifications.
    desktopFile="$(find /usr/share/applications/ -name "$command".desktop |
                   grep -0 "$command")"
        if [[ $desktopFile != "" ]] && [[ $KDEcheck == "file" ]]; then
            # Launch with notifications.
            time2="$(date +%s.%N)"
            kioclient exec $desktopFile
        else
            # Finally, just launch the program.
            time2="$(date +%s.%N)"
            $command &
        fi
fi

# Check for window move.
if [[ $moveMode == "Window move" ]]; then
    # Move the active window to desktop left or right and exit.
    desktopCount=$(expr $(wmctrl -d | tail -1 | cut -c 1) + 1)
    finalDesktop=$(expr $(expr $argsAction + $currentDesktop + $desktopCount) % $desktopCount)
    $(wmctrl -r :ACTIVE: -t $finalDesktop)
    time2="$(date +%s.%N)"
fi

# Verbose options moved down for speed.
if [ "$verbose" ]; then
    echo
    echo "Options unparsed: $*"
    echo "Search: $windowTitle"
    echo "Command: $command"
    echo "Current Desktop: $currentDesktop"
    echo "Move Mode: $moveMode"
    echo
    echo "$(wmctrl -lx)"
    echo
    echo "Search Results:"
    echo "$results"
    echo
    echo "Current Window: $currentWindow"
    echo "Move to Window: $windowID"
    echo
    if [ ! "$windowID" ]; then
        echo ".desktop File: $desktopFile"
        echo -en "KDE: no\b\b$([ "$KDEcheck" == "file" ] && echo -n 'yes')"
        echo
    fi
    echo "Time taken: 0$(echo $time2-$time1 | bc) seconds"
fi

exit 0