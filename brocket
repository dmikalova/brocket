#! /bin/bash

license="GPL License:

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    <http://www.gnu.org/licenses/>
    "

# Information
author="superfuzzykittens"
description="A launcher for X11 WMs that prevents multiple instances."
email="superfuzzykittens@gmail.com"
maintainer='David Mikalova'
name="brocket"
site="https://github.com/superfuzzykittens/brocket"
version="1.2.1"

# Help
help="Usage:
    $(basename ${0}) [-hHLv] [-m|n][-a|c|p|R] [TITLE] COMMAND

    $name attempts to see if an application is running, and if so, bring the
     application's window to the front, otherwise launch an instance.
     In essence, a single window mode.

Arguments:
    TITLE     The window title to search for.(case insensitive substring)
    COMMAND   The shell command to search the window classes with.

              A title search is optional and the command will be used instead.
              A command search should be sufficient to find a general program.

Modes:
    -a   Move to the desktop with the window.
    -c   Ignore the window class and only do a window title search.
    -p   Only activate windows on the current desktop. (default)
    -R   Bring the window from any desktop.

    -m   Move the active window to the desktop on the left.
    -n   Move the active window to the desktop on the right.

Help:
    -h   Print help.
    -H   Print more help.
    -L   GPL License.
    -v   Be verbose.

Examples:
    $(basename ${0}) kate
    $(basename ${0}) Dolphin dolphin
    $(basename ${0}) \"LibreOffice Writer\" libreoffice
    $(basename ${0}) -R amarok
    $(basename ${0}) -Rv konsole
    $(basename ${0}) -ac gwenview
    $(basename ${0}) -m
    "

longHelp="Compatability:
    - $name is based on wmctrl, and should work with the same WMs as wmctrl.
    - wmctrl is compatible with 'EWMH/NetWM compatible X Window Managers'
       Explicitly: Enlightenment, IceWM, KWin, Sawfish, and Xfce.
       Implicitly: Awesome, Fluxbox, Compiz, Openbox, and Metacity
                   (and XMonad if you turn on EWHM), and probably others.
    - With all that being said, $name has only been developed for/on Kwin.

Peculiarities:
    - The last mode entered should trump all others
    - If there are multiple search results, the oldest one counts.

Suggestions:
    - Try out KDE4's Custom Shortcuts to create a global shortcut.
    - Try aliases in ~/.bashrc. This will only affect your terminals, and not
       krunner or KDE4's global shortcuts. Run multiple instances by \escaping.

Future Plans:
    - Close window after inactivity time which is not possible in wmctrl.
    - Have the mode parsed so -a|R|p can react to -c.
    - Be able to -aR from specific desktops.


Information:
    $name v$version by $author
    $site
    "

# The default variable values
args="-R"
mode="Desktop stay Class search"
verbose=""

# Get the passed options
while getopts ":achHLmnpRvx" option; do
    case $option in
        a) args="-a"; mode="Desktop switch";;
        c) mode="Title Search";;
        h) echo "$help"; exit 2;;
        H) echo "$help"; echo "$longHelp"; exit 2;;
        L) echo "$license"; echo "$help"; echo "$longHelp"; exit 2;;
        m) mode="Window move"; args="-1";;
        n) mode="Window move"; args="1";;
        p) mode="Desktop stay Class search"; args="-R";;
        R) args="-R"; mode="Desktop switch";;
        v) verbose="true";;
        x) exit;;
    esac
done

# Remove parsed options
shift $((OPTIND-1))
[ "$verbose" ] && echo "Options unparsed: $*"


# Begin brocketing
windowTitle=$1 # Title bar search terms
if [ $2 ]; then
	command=$2 # Name of the binary to launch
else
	command=$windowTitle # Use the search term if none
fi
[ "$verbose" ] && echo "Search: $windowTitle"
[ "$verbose" ] && echo "Command: $command"


# Get the users current desktop number
userDesktop=$(wmctrl -d | grep \* | cut -c 1)
[ "$verbose" ] && echo "Current Desktop: $userDesktop"


# Get the Window ID based on specified options.
[ "$verbose" ] && echo "Mode: $mode"
if [[ $mode == "Window move" ]]; then
    # Just move the window left or right and exit.
    $(wmctrl -r :ACTIVE: -t $(($userDesktop+$args)))
    exit 0
elif [[ $mode == "Desktop stay Class search" ]]; then
    # Get window ID based on desktop, window class, and window title.
    results=$(wmctrl -lx |
        grep "0x........  $userDesktop $command\." |
        grep -i "$windowTitle")
elif [[ $mode == "Title Search" ]]; then
    # Get window ID based on window title.
    results=$(wmctrl -l |
        grep -i "$windowTitle")
else
    # Get window ID based on window class and window title.
    results=$(wmctrl -lx |
        grep "0x........ .. $command\." |
        grep -i "$windowTitle")
fi
windowID=$(echo $results |cut -c 1-10)
[ "$verbose" ] && echo
[ "$verbose" ] && echo "$(wmctrl -lx)"
[ "$verbose" ] && echo
[ "$verbose" ] && echo "Search Results:"
[ "$verbose" ] && echo "$results"
[ "$verbose" ] && echo
[ "$verbose" ] && echo "Window ID: $windowID"

# Look for a .desktop file to use launch notifications
desktopFile="$(find /usr/share/applications/ -name "$command".desktop |
    grep -m 1 "$command")"
[ "$verbose" ] && echo
[ "$verbose" ] && echo ".desktop File: $desktopFile"


# Check if kioclient exists for launch notifications
kioClientCheck=$(type -t kioclient)
[ "$verbose" ] && echo "KDE Environment?: $kioClientCheck ('file' means yes)"


if [ $windowID ]; then
    # Activate the window if one was found.
    wmctrl -i $args $windowID
elif [[ $desktopFile != "" ]] && [[ $kioClientCheck == "file" ]]; then
    # Otherwise try to open with Launch Notifications.
    kioclient exec $desktopFile
else
    # Finally, just launch the program
	$command &
fi

exit 0